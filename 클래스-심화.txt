클래스-심화

기초실습
< Partical 클래스와 협업 >
Partial Class나 파일 분할이 협업 시 왜 도움이 되는지 정리해 서술하고, 보고서를 제출하시오.
----------------------------------------------------------------------------------------------------------
Partial를 통해 클래스를 선언하는 가장 큰 이유는 개발자들의 우지보수성 향상이다. 여러 파일로 나누어 동일한 클래스를 관리함으로써 여러 명의 개발자가 하나의 프로젝트를 동시에 작업할 때 특히 유용하다. 각 파일을 통해 담당 개발자가 맡은 부분에 대해서만 관리할 수 있기 때문에 가독성 또한 향상된다. 이 외에도 변경된 한 부분만 다시 컴파일 할 수 있기 때문에 전체 프로젝트를 다시 빌드하지 않아도 되어 더 빠른 빌드시간을 제공해주기도 한다.
즉, 코드의 구조를 더 모듈화 할 수 있고 다수의 개발자가 협업할 때 효율성을 높일 수 있다.


심화과제
< 깊은 복사 심화 >
깊은 복사를 통해 생성된 객체가 가진 참조형 변수는 기존 객체의 변수와 메모리 공간상으로 같은 위치에 존재하는가?
기존 플레이어의 변수와 새로 할당된 변수의 내용은 어떻게 다른가?
새로 생성된 객체의 변수 내부 사항까지 복사하려면 어떻게 해야 하는가?
-----------------------------------------------------------------------------------------------------------
1) 깊은 복사를 통해 생성된 객체가 가진 참조형 변수는 기존 객체의 변수와 메모리 공간상으로 같은 위치에 존재하는가?
: 깊은 복사를 통해 생성된 객체가 가진 참조형 변수는 기존 객체의 변수와 메모리 공간상으로 같은 위치에 존재하지 않는다. 깊은 복사는 객체를 완전히 새로운 공간에 복사하는 것을 의미한다. 따라서 참조형 변수가 가르키는 객체도 새로운 메모리 공간에 복사되며 원복 객체의 변수들과는 별개의 메모리 공간에 저장된다.

2. 기존 플레이어의 변수와 새로 할당된 변수의 내용은 어떻게 다른가?
: 1번의 내용과 같이 서로 다른 메모리 위치에 저장되기 때문에 메모리의 위치가 다르다. 또한 기존 플레이어의 객체의 변수의 값을 복사하여 새로운 객체에 할당하게 된다. 그러므로 원본과 원본의 복사본을 가지게 된다. 복사본은 내용을 변경해도 원본에 영향을 마치지 않아 독립적인 상태를 유지한다.

3. 새로 생성된 객체의 변수 내부 사항까지 복사하려면 어떻게 해야 하는가?
직접 깊은 복사 메소드를 구현하거나 라이브러리를 활용하여 간단하게 객체를 깊은 복사한다.